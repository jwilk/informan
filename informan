#!/usr/bin/env perl

# Copyright Â© 2022 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

no lib '.';  # CVE-2016-1238

use v5.10;

use strict;
use warnings;

use charnames ':full';

use Encode::Alias ();
use English qw(-no_match_vars);
use File::Temp ();
use I18N::Langinfo (qw(langinfo CODESET));

use File::Which ();
use IPC::System::Simple ();

{
    my $encoding = langinfo(CODESET) // 'ASCII';
    Encode::Alias::define_alias('locale' => $encoding);
}

sub embolden
{
    local ($_) = @_;
    s/(\X)/$1\b$1/g;
    return $_;
}

sub fmt_xref
{
    (undef, my $space, local $_) = @_;
    state $arrow = do {
        my $s = "\N{RIGHTWARDS ARROW}";
        Encode::encode('locale', $s,
            sub { $s = '->'; }
        );
        $s =~ s/(.)/_\b$1/g;
        $s;
    };
    s/\c?//g;
    s/(?![.,]\z)((?=\S)\X)/_\b$1/g;
    $space =~ s/^ *//;
    return "$arrow ${space}$_";
}

sub create_script
{
    my ($path, @text) = @_;
    use autodie;
    open my $fh, '>', $path;
    for (@text) {
        say {$fh} $_
            or die "$path: $ERRNO";
    }
    close $fh;
    chmod oct('755'), $path;
    return;
}

sub slurp0
{
    my ($path) = @_;
    use autodie;
    open my $fh, '<', $path;
    local $INPUT_RECORD_SEPARATOR = "\0";
    my @lines = <$fh>;
    close $fh;
    chomp @lines;
    return @lines;
}

sub get_mans
{
    my ($man) = @_;
    my @lines = eval {
        IPC::System::Simple::capturex('man', '-a', '-w', $man);
    } or return;
    chomp @lines;
    return map { m{/([^/]+?)(?:[.]gz)?$} and $1 } @lines;
}

sub qstr::TIEHASH
{
    my ($class) = @_;
    return bless {}, $class;
}

sub qstr::FETCH
{
    my ($self, $index) = @_;
    return qr/[^$index]+|\c?[^\c?]+\c?/;
}

tie my %qstr_re, 'qstr';  ## no critic (ProhibitTies)

my $tmpdir = File::Temp->newdir(TEMPLATE => 'informan.XXXXXX', TMPDIR => 1);
create_script("$tmpdir/man", <<'EOF');
#!/bin/sh
printf '%s\0' "$@" > "${0%/*}/log"
exit 1
EOF
my $PATH = $ENV{PATH} // '';
length $PATH > 0
    or die "empty $PATH is not supported";
$PATH = "$tmpdir:$PATH";
my $info_error;
my @text = do {
    local $ENV{PATH} = $PATH;
    local $INPUT_RECORD_SEPARATOR = '';
    my @lines = ();
    eval {
        @lines = IPC::System::Simple::capturex('info', @ARGV);
    } or do {
        $info_error = $EVAL_ERROR;
    };
    @lines;
};
if ((not $info_error) and (scalar @text == 0)) {
    # This can happen when info(1) can't find the page.
    # https://git.savannah.gnu.org/cgit/texinfo.git/commit/?id=15408a7b46ae1c0d
    $info_error = 'info(1) failed';
}
if ($info_error) {
    my @args = eval {
        slurp0("$tmpdir/log");
    } or ();
    if (@args == 2 and $args[0] =~ m/\A-[aw]\z/) {
        my @mans = get_mans($args[1]);
        if (@mans > 0) {
            say {*STDERR} 'Try looking up manual pages instead:'
                or die $ERRNO;
            for my $man (@mans) {
                say {*STDERR} "  man $man"
                    or die $ERRNO;
            }
        }
    }
    die $info_error;
}
my $node;
if ($text[0] =~ m/\AFile:\s+([^\s,]+),\s+Node:\s+($qstr_re{','}),\s+(?:Next|Prev(?:ious)?|Up):/) {
    my $file = $1;
    $node = $2;
    $file =~ s/[.]info\z//;
    $node =~ s/\c?//g;
    $node = "($file)$node";
}
my $ul_chars = '*=-.';
my $ul_re = join('|', map { "[$_]+" } split(//, $ul_chars));
my $infofile_re = qr/([(](?:(?>[^()]+)|(?-1))*[)])/;  # nested parens
my $label_re = $qstr_re{':'};
my $id_re = qr/(?:$infofile_re)?$qstr_re{'.,'}/;
my $xref_re = qr/([*] *[Nn]ote)(\s++)($label_re:(?::|$id_re[.,]))/;
for my $text (@text) {
    $text = Encode::decode('locale', $text);
    $text =~ s{^(\S.+)(?=\n(?:$ul_re)\n)}{embolden($1)}ge or
        $text =~ s{$xref_re}{fmt_xref($1, $2, $3)}ge;
    $text = Encode::encode('locale', $text);
}
my $pager = $ENV{PAGER}
    // File::Which::which('pager')  # Debian <https://www.debian.org/doc/debian-policy/ch-customized-programs.html#editors-and-pagers>
    // 'more';  # POSIX <https://pubs.opengroup.org/onlinepubs/007904975/utilities/man.html#tag_04_85_08>
if ($pager eq 'cat') {
    $pager = undef;
}
if (not -t *STDOUT) {
    $pager = undef;
}
if (@ARGV >= 1 and $ARGV[0] =~ m/\A(-h|--help|--version)\Z/) {
    $pager = undef;
}

sub get_less_options
{
    my ($title) = @_;
	my $prompt = 'Info';
    if (defined $title) {
        $title =~ s/([?:.%\\])/\\$1/g;
        # FIXME: less doesn't seem to offer any good way to escape $ characters.
        # --use-backslash may sound like what we want, but there's no apparent way
        # to undo it, so that it doesn't affect the original user's $LESS.
        # See also: https://bugs.debian.org/1021951
        my $repl_char = Encode::encode('locale', "\N{REPLACEMENT CHARACTER}");
        $title =~ s/\$/$repl_char/g;
        $prompt .= " $title";
    }
    # Shamelessly stolen from <https://git.savannah.nongnu.org/cgit/man-db.git/tree/src/man.c?h=2.9.4#n4173>:
    $prompt .= ', ?ltline %lt?L/%L.:byte %bB?s/%s..?e (END):?pB %pB\%..';
    $prompt .= ' (press h for help or q to quit)';
    my $prefix = "-ix8mPm$prompt\$PM$prompt\$";
    my $LESS = $ENV{LESS} // '';
    my $orig_prefix = $ENV{INFORMAN_LESS_PREFIX} // '';
    $LESS =~ s/\A\Q$orig_prefix//;
    return ($prefix, $LESS);
}

if (defined $pager) {
    my ($less_prefix, $orig_less) = get_less_options($node);
    local $ENV{INFORMAN_LESS_PREFIX} = $less_prefix;
    local $ENV{LESS} = "$less_prefix$orig_less";
    open(my $fh, '|-', 'sh', '-c', $pager)
        or die "pager: $ERRNO";
    for my $text (@text) {
        print {$fh} $text
            or die "pager: $ERRNO";
    }
    close($fh)
        or die 'pager: ' . ($ERRNO or 'failed');
} else {
    for my $text (@text) {
        print $text
            or die $ERRNO;
    }
}

# vim:ts=4 sts=4 sw=4 et
